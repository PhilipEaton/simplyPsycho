% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generalModelFit.R
\name{gen.model.TotalScores}
\alias{gen.model.TotalScores}
\title{General fitting of total scores with a normal distribution.}
\usage{
gen.model.TotalScores(data, model = "Normal", makePlot = FALSE)
}
\arguments{
\item{data}{Can be either

1) An nS by nQ matrix or data frame of a dichotomous graded (0 or 1) sample,
where nS is the number of students in the sample and nQ is the number of questions,

2) The output of piql.data.select with one or multiple courses selected.}

\item{model}{(Default = "Normal") Model = "Normal", the mean, standard deviation,
skew, kertosis and standard error will be estimated for the given course(s).
Model = "Bimodal" will also report the possible location of the two mean values
assuming the sample is drawn from a bimodal distribution.
Model = "Johnson" will use a Johnson fit method to fit the data including the skew and
kurtosis.}

\item{makePlot}{(Default = FALSE). If TRUE, then a single plot of the
fraction of students with each possible total score and the estimated normal
distribution for each courses in the data will be created.}
}
\value{
Mean, Standard deviation, and optional plot. Additionally, if model = "Bimodal"
then the estimated locaitons of maximums (means) assuming a bimodal distribution will be
reported.
}
\description{
Fits a normal distribution to the total scores.
}
\examples{
# Pull sample data
temp.data <- piql.data.select(simplySampleData, courses = 1, numBlanks.allowed = 0, MCMR.items = NA)
data.num <- temp.data$data.num
# --------------------------- #
# For multiple courses
data.multiple <- piql.data.select(PIQLdata, course = c(1,2,123))

## Single Course
# Total score means and standard deviations...
gen.model.TotalScores(data.num)
# ...  with optional plotting.
gen.model.TotalScores(data.num, makePlot = TRUE)
# Supports bimodal estimations as well
gen.model.TotalScores(data.num, model = "Bimodal", makePlot = TRUE)

## Multiple courses (*Current sample data does not support this example.*)
# Total score means and standard deviations...
gen.model.TotalScores(data.multiple)
# ...  with optional plotting.
gen.model.TotalScores(data.multiple, makePlot = TRUE)
# Supports bimodal estimations as well
gen.model.TotalScores(data.multiple, model = "Bimodal", makePlot = TRUE)
}
